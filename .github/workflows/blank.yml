name: gsheet.action test
on: push

jobs:
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output_id: ${{ steps.step1.outputs.id }}
    steps:
      - uses: actions/checkout@v1
      - id: step1
        run: echo "::set-output name=id::\"$(git log -1 --pretty=format:'%an')\""
  job2:
    runs-on: ubuntu-latest
    needs: job1
    outputs:
      output_id_number: ${{ steps.step1.outputs.id }}
    steps:
      - id: 'get_worksheet'
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{secrets.SPREADSHEET_ID}}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "generetedSheet", "minCol": 1, "maxCol": 1 } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.SERVICE_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.SERVICE_KEY }}
      - id: step1
        name: dump results
        env:
          #  the output of the action can be found in ${{ steps.update_worksheet.outputs.results }}
          RESULTS: ${{ steps.update_worksheet.outputs.results }}
        run: |
          cmd=$(echo "${RESULTS}" | jq ".results[0].result.rawData")
          echo "$cmd"
          gitid=\"${{needs.job1.outputs.output_id}}\"
          for i in {0..5}
          do
            t=$(echo "${cmd}" | jq ".[$i][0]")
            echo "$t"
            echo "$gitid"
            if [ "$t" = "$gitid" ]; then
              echo "FOUND"
              echo "$i"
              j="[{ "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": ${{needs.job2.outputs.output_id_number}}, "minRow": 2 }} ]"
              echo "$j"
              echo "::set-output name=id::$j"
            else
              echo "Strings are not equal."
            fi
          done
          echo "$gitid"
#        echo "::set-output name=id::$i"
  job3:
    runs-on: ubuntu-latest
    needs: job2
    steps:
      - id: 'update_worksheet'
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{secrets.SPREADSHEET_ID}}
          commands: | # list of commands, specified as a valid JSON string
            ${{needs.job2.outputs.output_id_number}}
#           [
#             { "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": ${{needs.job2.outputs.output_id_number}}, "minRow": 2 }}
#           ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.SERVICE_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.SERVICE_KEY }}
      - id: dump
        run: |
          gitid=${{needs.job2.outputs.output_id_number}}
          echo "$gitid"

#       - uses: actions/checkout@v1
#       - name: Extract info
#         uses: ./ # Uses an action in the root directory
#         id: infos
#         with:
#           filter_push: '.commits[].author'
#           filter_pull_request: '.pull_request.commits'
#       - name: dump results
#         env:
#           #  the output of the action can be found in ${{ steps.update_worksheet.outputs.results }}
#           RESULTS: ${{ steps.update_worksheet.outputs.results }}
#         run: |
#           pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
#           echo "$pull_number"
#           echo "$.pull_request.number"
#           echo "Infos"
#           echo "value: ${{ steps.infos.outputs.value }}"
#           echo "branch: ${{ steps.infos.outputs.branch }}"
#           echo "pull_request: ${{ steps.infos.outputs.pull_request }}"
#           git log -1 --pretty=format:'%an' 
  
  
  
  
  
  
#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     outputs:
#       output_id_number: ${{ steps.step1.outputs.id }}
#     steps:
#     - id: step1
#       run: |
#         gitid=${{needs.job1.outputs.output_id}}
#         echo "$gitid"
#         for i in [1..60]
#         do
#           if [ "$gitid" = "$t" ];
#           then
#             idnumber="$i"
#           fi
#         done
#         echo "::set-output name=id::$id_number"
#   fetch:
#     runs-on: ubuntu-latest
#     needs: job2
#     steps:
#       - id: 'update_worksheet'
#         uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
#         with:
#           spreadsheetId: ${{secrets.SPREADSHEET_ID}}
#           commands: | # list of commands, specified as a valid JSON string
#             [
#               { "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": ${{needs.job2.outputs.output_id_number}}, "minRow": 2 }}
#             ]
#         env:
#           GSHEET_CLIENT_EMAIL: ${{ secrets.SERVICE_EMAIL }}
#           GSHEET_PRIVATE_KEY: ${{ secrets.SERVICE_KEY }}
#           #{ "command": "getData", "args": { "worksheetTitle": "generetedSheet", "minCol": 1, "maxCol": 1 } },
#           # { "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": 2, "minRow": 3 }},
#         # { "command": "updateData", "args": {"data": [["A1", "A2", "A3"]] }},
# # { "command": "addWorksheet", "args": { "worksheetTitle": "generetedSheet" }},
# #               { "command": "appendData", "args": { "worksheetTitle": "generetedSheet", "data": [["B1", "B2", "B3"]], "minCol": 1 }}
#                         # { "command": "updateData", "args": { "worksheetTitle": "Sheet1", "data": [["A1", "A2", "A3"]] }},
#                 # \"$(git log -1 --pretty=format:'%an')\"
# #       - name: dump results
# #         env:
# #           #  the output of the action can be found in ${{ steps.update_worksheet.outputs.results }}
# #           RESULTS: ${{ steps.update_worksheet.outputs.results }}
# #         run: |
# #           cmd=$(echo "${RESULTS}" | jq ".results[0].result.rawData")
# #           gitid=$(echo "${{ jobs.get_id_job.steps.get_id_step.outputs.id }}")
# #           echo "$gitid"
# #           for i in {0..60}
# #           do
# #             t=$(echo "${cmd}" | jq ".[$i][0]")
# #             if [ "$gitid" = "$t" ];
# #             then
# #               echo "FOUND"
# #               [
# #                 { "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": $i, "minRow": 2 }}
# #               ]
# #             fi
# #           done
# # jobs:  
# #   get_id_job:
# #     name: Create version number
# #     runs-on: ubuntu-latest
# #     steps:
# #       - id: get_id_step
# #         run: echo "::set-output name=id::\"$(git log -1 --pretty=format:'%an')\""
# #   fetch:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - id: 'update_worksheet'
# #         uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
# #         with:
# #           spreadsheetId: ${{secrets.SPREADSHEET_ID}}
# #           commands: | # list of commands, specified as a valid JSON string
# #             [
# #               { "command": "getData", "args": { "worksheetTitle": "generetedSheet", "minCol": 1, "maxCol": 1 } }
# #             ]
# #         env:
# #           GSHEET_CLIENT_EMAIL: ${{ secrets.SERVICE_EMAIL }}
# #           GSHEET_PRIVATE_KEY: ${{ secrets.SERVICE_KEY }}
# #           # { "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": 2, "minRow": 3 }},
# #         # { "command": "updateData", "args": {"data": [["A1", "A2", "A3"]] }},
# # # { "command": "addWorksheet", "args": { "worksheetTitle": "generetedSheet" }},
# # #               { "command": "appendData", "args": { "worksheetTitle": "generetedSheet", "data": [["B1", "B2", "B3"]], "minCol": 1 }}
# #                         # { "command": "updateData", "args": { "worksheetTitle": "Sheet1", "data": [["A1", "A2", "A3"]] }},
# #                 # \"$(git log -1 --pretty=format:'%an')\"
# #       - name: dump results
# #         env:
# #           #  the output of the action can be found in ${{ steps.update_worksheet.outputs.results }}
# #           RESULTS: ${{ steps.update_worksheet.outputs.results }}
# #         run: |
# #           cmd=$(echo "${RESULTS}" | jq ".results[0].result.rawData")
# #           gitid=$(echo "${{ jobs.get_id_job.steps.get_id_step.outputs.id }}")
# #           echo "$gitid"
# #           for i in {0..60}
# #           do
# #             t=$(echo "${cmd}" | jq ".[$i][0]")
# #             if [ "$gitid" = "$t" ];
# #             then
# #               echo "FOUND"
# #               [
# #                 { "command": "updateData", "args": {"worksheetTitle": "generetedSheet", "data": [["yes"]], "minCol": $i, "minRow": 2 }}
# #               ]
# #             fi
# #           done


# #       - uses: actions/checkout@v1
# #       - name: Extract info
# #         uses: ./ # Uses an action in the root directory
# #         id: infos
# #         with:
# #           filter_push: '.commits[].author'
# #           filter_pull_request: '.pull_request.commits'
# #       - name: dump results
# #         env:
# #           #  the output of the action can be found in ${{ steps.update_worksheet.outputs.results }}
# #           RESULTS: ${{ steps.update_worksheet.outputs.results }}
# #         run: |
# #           pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
# #           echo "$pull_number"
# #           echo "$.pull_request.number"
# #           echo "Infos"
# #           echo "value: ${{ steps.infos.outputs.value }}"
# #           echo "branch: ${{ steps.infos.outputs.branch }}"
# #           echo "pull_request: ${{ steps.infos.outputs.pull_request }}"
# #           git log -1 --pretty=format:'%an'
          


          
